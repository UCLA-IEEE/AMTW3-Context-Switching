.thumb
.syntax unified

#include "syscall_numbers.h"

.global kernel_entry
.global kernel_exit

.global sys_get_tid
.global sys_yield
.global sys_wait
.global sys_kill
.global sys_lock
.global sys_unlock
.global sys_sleep
.global sys_fork
.global sys_spawn
.global sys_exit
.global sys_reset

// Refer to page 110 of the datasheet

kernel_exit:
    // Pop the software-saved registers out of the struct
    // Need a pointer to R4 in the struct
    ldr r1, =thread_current
    ldr r1, [r1]
    // sp should be pointing at r4 in the registers struct at this point
    add r1, #12
    mov sp, r1

    // Pop r4-r11
    ldmia r1!, {r4-r11}

    // Pop sp; r1 should point at psr in the registers struct after this
    ldr r2, [r1], #32
    mov sp, r2

    // Push the exception frame onto the stack (overwriting it if it is already
    // there; this is to deal with the case where a new thread is spawned and
    // its stack is empty).
    mov r3, #8
_kex_registers_copy_loop:
    ldr r2, [r1], #-4
    push {r2}
    subs r3, #1
    bne _kex_registers_copy_loop

    // Flush cache and instruction pipeline
    dsb
    isb

    // Perform exceptional return; this will pop r0-r3, r12, lr, pc, and psr in
    // hardware
    mov lr, #0xFFFFFFF9
    bx lr


kernel_entry:
    // Store the stack pointer just above the exception frame
    add r0, sp, #32

    // Push the remaining registers onto the stack (plus the stack pointer from
    // before)
    str r0, [sp, #-4]!
    stmdb sp!, {r4-r11}

    sub r0, #4

    // Get the address of the pointer to the current thread struct
    ldr r1,=thread_current

    // Get the address of the current thread struct
    ldr r1, [r1]

    // Get the address of the registers struct from that current thread
    //      add r1, #12
    // Advance the pointer to the end of the struct
    //      add r1, #64
    // Combine the two operations:
    add r1, #76

    // Load a counter with 17; this will be decremented as registers are copied
    // (There are 17 registers to copy; R0-R12, LR, PC, SP, PSR
    mov r2, #17

    // Copy the 16 registers into the registers struct from the stack
_ken_registers_copy_loop:

    // Load a value from the stack
    ldr r3, [r0, #0]
    str r3, [r1, #0]
    sub r0, #4
    sub r1, #4

    // Decrement counter and set Z flag if zero is produced
    subs r2, #1

    // If the counter is non-zero (Z flag cleared), keep looping
    bne _ken_registers_copy_loop

    ldr r0,=kernel_stack_top
    ldr sp,[r0]

    mrs r12, xpsr
    and r12, #0x1F
    //lsl r12, #23
    //lsr r12, #23
    subs r12, #15
    bne _systick_dont_jump
    bl kernel_tick_counter
    bl kernel_schedule
_systick_dont_jump:

    bl kernel_handle_syscall

/*
 * All of these system calls conform to the ARM C calling convention (arguments
 * passed by registers, lr loaded with return address). The DankOS kernel
 * expects to see the system call number in r0, so we have to move the rest of
 * the arguments over (r0 -> r1, r1 -> r2, etc...). This is done in reverse
 * order so as not to propagate r0 to all of the arguments.
 */

/*
 * extern tid_t sys_get_tid();
 */
sys_get_tid:
    ldr r0, =SYSCALL_GET_TID
    svc #0x80
    bx lr

/*
 * extern void sys_yield();
 */
sys_yield:
    ldr r0, =SYSCALL_YIELD
    svc #0x80
    bx lr

/*
 * extern int32_t sys_wait(tid_t tid);
 */
sys_wait:
    push {r1}
    mov r1, r0
    ldr r0, =SYSCALL_WAIT
    svc #0x80
    pop {r1}
    bx lr

/*
 * extern bool sys_kill(tid_t tid);
 */
sys_kill:
    push {r1}
    mov r1, r0
    ldr r0, =SYSCALL_KILL
    svc #0x80
    pop {r1}
    bx lr

/*
 * extern bool sys_lock(lock_t* lock);
 */
sys_lock:
    push {r1}
    mov r1, r0
    ldr r0, =SYSCALL_LOCK
    svc #0x80
    pop {r1}
    bx lr

/*
 * extern void sys_unlock(lock_t* lock);
 */
sys_unlock:
    push {r1}
    mov r1, r0
    ldr r0, =SYSCALL_UNLOCK
    svc #0x80
    pop {r1}
    bx lr

/*
 * extern uint32_t sys_sleep(uint32_t ms);
 */
sys_sleep:
    push {r1}
    mov r1, r0
    ldr r0, =SYSCALL_SLEEP
    svc #0x80
    pop {r1}
    bx lr

/*
 * extern tid_t sys_fork();
 */
sys_fork:
    ldr r0, =SYSCALL_FORK
    svc #0x80
    bx lr

/*
 * extern tid_t sys_spawn(int (*entry)(void*), void* arg);
 */
sys_spawn:
    push {r2}
    mov r2, r1
    mov r1, r0
    ldr r0, =SYSCALL_SPAWN
    svc #0x80
    pop {r2}
    bx lr

/*
 * _exit and sys_exit have the same calling convention, so why not combine them?
 *
 * extern void sys_exit(int status);
 */
_exit:
sys_exit:
    mov r1, r0
    ldr r0, =SYSCALL_EXIT
    svc #0x80

/*
 * extern void sys_reset();
 */
sys_reset:
    ldr r0, =SYSCALL_RESET
    svc #0x80
